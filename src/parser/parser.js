/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,18,19,20,21,22,24,32],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,16],$V9=[1,24],$Va=[1,26],$Vb=[5,17,18,19,20,21,22,24,26,28,29,30,31,32,33],$Vc=[5,17,18,19,20,21,22,24,26,29,31,32,33],$Vd=[1,39],$Ve=[5,24,26,29,31,33],$Vf=[2,21],$Vg=[1,44],$Vh=[26,29,31,33];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"ProgramBody":4,"EOF":5,"ProgramElement":6,"Expression":7,"NewLines":8,"FunctionCall":9,"Arr":10,"Identifier":11,"Str":12,"Atom":13,"Special":14,"Num":15,"Regexp":16,"IDENTIFIER":17,"STRING":18,"ATOM":19,"SPECIALVAL":20,"NUMBER":21,"REGEXP":22,"NewLine":23,"NEWLINE":24,"SingelineList":25,",":26,"MultilineList":27,"(":28,")":29,"INDENT":30,"DEDENT":31,"[":32,"]":33,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"IDENTIFIER",18:"STRING",19:"ATOM",20:"SPECIALVAL",21:"NUMBER",22:"REGEXP",24:"NEWLINE",26:",",28:"(",29:")",30:"INDENT",31:"DEDENT",32:"[",33:"]"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[11,1],[12,1],[13,1],[14,1],[15,1],[16,1],[23,1],[25,1],[25,3],[8,1],[8,2],[27,1],[27,1],[27,3],[27,3],[27,2],[9,3],[9,4],[9,4],[9,6],[9,2],[9,4],[10,2],[10,3],[10,3],[10,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = new ProgramNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0]));
      return this.$;
    
break;
case 2:

      this.$ = $$[$0-1].concat($$[$0]);
    
break;
case 3:

      this.$ = [];
    
break;
case 14:

      this.$ = new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 15:

      this.$ = new StringNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 16:

      this.$ = new AtomNode($$[$0].slice(1), createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 17:

      this.$ = new SpecialNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 18:

      this.$ = new NumberNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 19:

      this.$ = new RegexpNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 20:

      this.$ = new NewLineNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
    
break;
case 21: case 25:
 this.$ = [$$[$0]]; 
break;
case 22: case 27:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 23: case 24:
 this.$ = $$[$0]; 
break;
case 26:
 this.$ = []; 
break;
case 28:
 this.$ = $$[$0-2]; 
break;
case 29:
 this.$ = $$[$0-1]; 
break;
case 30:

      this.$ = new FunctionCallNode($$[$0-2], {items:[]}, createSourceLocation(null, _$[$0-2], _$[$0]));
    
break;
case 31: case 32:

      this.$ = new FunctionCallNode($$[$0-3], {items:$$[$0-1]}, createSourceLocation(null, _$[$0-3], _$[$0]));
    
break;
case 33:

      this.$ = new FunctionCallNode($$[$0-5], {items:$$[$0-2]}, createSourceLocation(null, _$[$0-5], _$[$0]));
    
break;
case 34:

      this.$ = new FunctionCallNode($$[$0-1], {items:$$[$0]}, createSourceLocation(null, _$[$0-1], _$[$0]));
    
break;
case 35:

      this.$ = new FunctionCallNode($$[$0-3], {items:$$[$0-1]}, createSourceLocation(null, _$[$0-3], _$[$0-1]));
    
break;
case 36:

      this.$ = new ArrNode([], createSourceLocation(null, _$[$0-1], _$[$0]));
    
break;
case 37: case 38:

      this.$ = new ArrNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
    
break;
case 39:

      this.$ = new ArrNode($$[$0-2], createSourceLocation(null, _$[$0-4], _$[$0]));
    
break;
}
},
table: [o($V0,[2,3],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,32:$V8},{1:[2,1]},o($V0,[2,2]),o([5,24],[2,4],{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o([5,17,18,19,20,21,22,32],[2,5],{23:28,24:$V7}),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vc,[2,23]),{7:33,8:34,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,25:30,27:31,30:[1,32],32:$V8,33:[1,29]},o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vb,[2,19]),o($Vc,[2,20]),{7:33,8:34,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,25:36,27:37,29:[1,35],30:[1,38],32:$V8},o([5,17,18,19,20,21,22,24,28,29,30,31,32,33],[2,34],{26:$Vd}),{7:41,8:34,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,27:40,32:$V8},o($Ve,$Vf,{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o($Vc,[2,24]),o($Vb,[2,36]),{26:$Vd,33:[1,42]},{8:45,23:15,24:$V7,26:$Vg,33:[1,43]},{7:41,8:34,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,27:46,32:$V8},o([24,26,29,33],$Vf,{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o($Vh,[2,26],{23:28,24:$V7}),o($Vb,[2,30]),{26:$Vd,29:[1,47]},{8:45,23:15,24:$V7,26:$Vg,29:[1,48]},{7:41,8:34,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,27:49,32:$V8},{7:50,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,32:$V8},{8:45,23:15,24:$V7,26:$Vg,31:[1,51]},o([24,26,31],[2,25],{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o($Vb,[2,37]),o($Vb,[2,38]),{7:52,8:53,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:15,24:$V7,32:$V8},o($Vh,[2,29],{23:28,24:$V7}),{8:45,23:15,24:$V7,26:$Vg,31:[1,54]},o($Vb,[2,31]),o($Vb,[2,32]),{8:45,23:15,24:$V7,26:$Vg,31:[1,55]},o($Ve,[2,22],{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o($Vb,[2,35]),o([24,26,29,31,33],[2,27],{9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,25:25,7:27,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,28:$V9,30:$Va,32:$V8}),o($Vh,[2,28],{23:28,24:$V7}),{33:[1,56]},{29:[1,57]},o($Vb,[2,39]),o($Vb,[2,33])],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var shared = {};

function createSourceLocation(source, firstToken, lastToken) {
    return new SourceLocation(
        source,
        new Position(
            firstToken.first_line,
            firstToken.first_column
        ),
        new Position(
            lastToken.last_line,
            lastToken.last_column
        )
    );
}

function Position(line, column) {
  this.line   = line;
  this.column = column;
}

function SourceLocation(source, start, end) {
  this.source = source;
  this.start  = start;
  this.end    = end;
}

function ProgramNode(body, loc) {
  this.type = "Program";
  this.length = body.length;
  this.body = body;
  this.loc  = loc;
  this.shared = shared;
}

function NewLineNode(src, loc) {
  this.src = src;
  this.type = "NewLine";
  this.loc = loc;
  this.shared = shared;
}

function CommentNode(text, loc) {
  this.src = text;
  this.type = 'Comment';
  this.text = text.replace(/^\#\s*/, '');
  this.loc = loc;
  this.shared = shared;
}

function RegexpNode(text, loc) {
  this.src = text;
  this.text = text;
  this.type = 'Regexp';
  this.loc = loc;
  this.shared = shared;
}

function IdentifierNode(text, loc) {
  this.src = text;
  this.type = 'Identifier';
  this.text = text;
  this.loc = loc;
  this.shared = shared;
}

function StringNode(text, loc) {
  this.src = text;
  this.type = 'String';
  this.text = text;
  this.loc = loc;
  this.shared = shared;
}

function AtomNode(text, loc) {
  this.src = '~' + text;
  this.type = 'Atom';
  this.text = text;
  this.loc = loc;
  this.shared = shared;
}

function SpecialNode(text, loc) {
  this.src = text;
  this.type = 'Special';
  this.text = text;
  this.loc = loc;
  this.shared = shared;
}

function NumberNode(num, loc) {
  this.src = num;
  this.type = 'Number';
  this.number = num;
  this.loc = loc;
  this.shared = shared;
}

function LookupNode(left, right, loc) {
  this.type = 'Lookup';
  this.left = left;
  this.right = right;
  this.loc = loc;
  this.shared = shared;
}

function TupleNode(body, loc) {
  this.src = "{" + body.map(function (item) { return item.src; }).join(', ') + "}";
  this.type = 'Tuple';
  this.length = body.length;
  this.items = body;
  this.loc = loc;
  this.shared = shared;
}

function OperationNode(operator, left, right, loc) {
  this.type = 'Operation';
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
  this.shared = shared;
}

function LogicNode(operator, left, right, loc) {
  this.type = 'Logic';
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
  this.shared = shared;
}

function AssignmentNode(left, right, loc) {
  this.type = 'Assignment';
  this.left = left;
  this.right = right;
  this.loc = loc;
  this.shared = shared;
}

function ConsNode(toAdd, base, loc) {
  this.src = '[' + toAdd.src + '|' + base.src + ']';
  this.type = 'Cons';
  this.toAdd = toAdd;
  this.base = base;
  this.loc = loc;
  this.shared = shared;
}

function BackConsNode(toAdd, base, loc) {
  this.src = '[' + base.src + '||' + toAdd.src + ']';
  this.type = 'BackCons';
  this.toAdd = toAdd;
  this.base = base;
  this.loc = loc;
  this.shared = shared;
}

function OppositeNode(value, loc) {
  this.type = 'Opposite';
  this.value = value;
  this.loc = loc;
  this.shared = shared;
}

function ListNode(items, isWrapped, loc) {
  this.src = '(' + items.map(function (item) { return item.src }).join(', ') + ')';
  this.type = 'List';
  this.length = items.length;
  this.isWrapped = isWrapped;
  this.items = items;
  this.loc = loc;
  this.shared = shared;
}

function ArrNode(items, loc) {
  this.src = "[" + items.map(function (item) { return item.src; }).join(', ') + "]";
  this.type = 'Arr';
  this.length = items.length;
  this.items = items;
  this.loc = loc;
  this.shared = shared;
}

function ObjNode(pairs, loc) {
  this.type = 'Obj';
  this.length = pairs.length;
  this.pairs = pairs;
  this.loc = loc;
  this.shared = shared;
}

function CompNode(action, params, list, caveat, loc) {
  this.type = 'Comp';
  this.action = action;
  this.params = params;
  this.list = list;
  this.caveat = caveat;
  this.loc = loc;
  this.shared = shared;
}

function FunctionCallNode(fn, args, loc) {
  this.type = 'FunctionCall';
  this.fn = fn;
  this.args = args;
  this.loc = loc;
  this.shared = shared;
}

function QualifierNode(action, condition, elseCase, keyword, loc) {
  this.type = 'Qualifier';
  this.action = action;
  this.keyword = keyword.toLowerCase();
  this.condition = condition;
  this.elseCase = elseCase;
  this.loc = loc;
  this.shared = shared;
}

function CondNode(conditions, loc) {
  this.type = 'Cond';
  this.length = conditions.length;
  this.conditions = conditions;
  this.loc = loc;
  this.shared = shared;
}

function CaseofNode(comparator, conditions, loc) {
  this.type = 'Caseof';
  this.length = conditions.length;
  this.comparator = comparator;
  this.conditions = conditions;
  this.loc = loc;
  this.shared = shared;
}

function FunNode(preArrow, body, bind, guard, loc) {
  this.type = 'Fun';
  this.length = body.length;
  this.bind = bind;
  this.preArrow = preArrow;
  this.guard = guard;
  this.body = body;
  this.loc = loc;
  this.shared = shared;
}

function PolymorphNode(fns, isNamed, loc) {
  this.type = 'Polymorph';
  this.length = fns.length;
  this.isNamed = isNamed;
  this.fns = fns;
  this.loc = loc;
  this.shared = shared;
}

function TryCatchNode(attempt, errName, fallback, loc) {
  this.type = 'TryCatch';
  this.attempt = attempt;
  this.errName = errName;
  this.fallback = fallback;
  this.loc = loc;
  this.shared = shared;
}

function ImportNode(toImport, file, loc) {
  this.type = 'Import';
  this.toImport = toImport;
  this.file = file;
  this.loc = loc;
  this.shared = shared;
}

function ExportNode(toExport, isDefault, loc) {
  this.type = 'Export';
  this.toExport = toExport;
  this.isDefault = isDefault;
  this.loc = loc;
  this.shared = shared;
}

function HtmlNode(selfClosing, openTag, attrs, body, closeTag, loc) {
  this.type = 'Html';
  this.selfClosing = selfClosing;
  this.openTag = openTag;
  this.closeTag = closeTag;
  this.attrs = attrs;
  this.body = body;
  this.loc = loc;
  this.shared = shared;
}

function PipeNode(initVal, chain, loc) {
  this.type = 'Pipe';
  this.initVal = initVal;
  this.chain = chain;
  this.loc = loc;
  this.shared = shared;
}

function WrapNode(item, loc) {
  this.type = 'Wrap';
  this.item = item;
  this.loc = loc;
  this.shared = shared;
}

/* Expose the Node Constructors */
var n = parser.nodes = {};

n.shared = shared;
n.ProgramNode = ProgramNode;
n.NewLineNode = NewLineNode;
n.CommentNode = CommentNode;
n.RegexpNode = RegexpNode;
n.StringNode = StringNode;
n.AtomNode = AtomNode;
n.SpecialNode = SpecialNode;
n.IdentifierNode = IdentifierNode;
n.NumberNode = NumberNode;
n.LookupNode = LookupNode;
n.TupleNode = TupleNode;
n.OperationNode = OperationNode;
n.LogicNode = LogicNode;
n.AssignmentNode = AssignmentNode;
n.ConsNode = ConsNode;
n.BackConsNode = BackConsNode;
n.OppositeNode = OppositeNode;
n.ListNode = ListNode;
n.ArrNode = ArrNode;
n.ObjNode = ObjNode;
n.CompNode = CompNode;
n.FunctionCallNode = FunctionCallNode;
n.QualifierNode = QualifierNode;
n.CondNode = CondNode;
n.CaseofNode = CaseofNode;
n.FunNode = FunNode;
n.PolymorphNode = PolymorphNode;
n.TryCatchNode = TryCatchNode;
n.ImportNode = ImportNode;
n.ExportNode = ExportNode;
n.HtmlNode = HtmlNode;
n.PipeNode = PipeNode;
n.WrapNode = WrapNode;

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}